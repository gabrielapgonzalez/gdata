import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
import os

import dask.dataframe as dd

#Libraries setup
os.chdir('/home/tiago/Documents/HCG_competition')
print(os.getcwd())
pd.set_option('display.max_columns', 200)

#load data
n_pa1 = open('n_pa1', 'rb')
pa1= pickle.load(n_pa1)
pa1 = pd.DataFrame(pa1["pa_1"])
n_pos2 = open('n_pos2', 'rb')
pos2 = pickle.load(n_pos2)
pos2 = pd.DataFrame(pos2["pos2"])
n_ip2 = open('n_ip2', 'rb')
ip2 = pickle.load(n_ip2)
ip2 = pd.DataFrame(ip2["ip_2"])
n_cb2 = open('n_cb2', 'rb')
cb2 = pickle.load(n_cb2)
cb2 = pd.DataFrame(cb2["cb_2"])
n_description = open('n_description', 'rb')
description = pickle.load(n_description)
description = pd.DataFrame(description['description'])
n_train = open('n_train', 'rb')
train = pickle.load(n_train)
train = pd.DataFrame(train["train"])

#exploring
pa1.columns = map(str.lower, pa1.columns)
pos2.columns = map(str.lower, pos2.columns)
ip2.columns = map(str.lower, ip2.columns)
cb2.columns = map(str.lower, cb2.columns)
train.columns = map(str.lower, train.columns);
description.columns = map(str.lower, description.columns)

#using dask
dpa1 = dd.from_pandas(pa1, npartitions=8)


#name_contract_type - tipo de credito, se foi em dinheiro, bens ou rotativo
description.description[175]
dpa1.name_contract_type.isnull().sum().compute()
dpa1.groupby('name_contract_type').sk_id_prev.count().compute()
dpa1.groupby('name_contract_type').mean().compute()


#amt_annuity - anuidade da aplicacao anterior
description.description[176]
dpa1.amt_annuity.isnull().sum().compute()
sns.distplot(dpa1.amt_annuity.dropna(), kde=True, bins=20)

#amt_application - quanto credito o cliente pediu na aplicacao anterior
description.description[177]
dpa1.amt_application.isnull().sum().compute()
sns.distplot(dpa1.amt_application, kde=True, bins=20)

#amt_credit - quanto credito o cliente de fato recebeu
description.description[178]
dpa1.amt_credit.isnull().sum().compute()
sns.distplot(dpa1.amt_credit.dropna(), kde=True, bins=20)

#nova feature: amt_credit - amt_application (diferenca do pedido e do emprestado)

#amt_down_payment - pagamento inicial
description.description[179]
dpa1.amt_down_payment.isnull().sum().compute()
sns.distplot(dpa1.amt_down_payment.dropna(), kde=True, bins=5)

#amt_goods_price - preco dos bens
description.description[180]
dpa1.amt_goods_price.isnull().sum().compute()
sns.distplot(dpa1.amt_goods_price.dropna(), kde=True, bins=5)

#weekday_appr_process_start - dia da semana em que o processo se iniciou
description.description[181]
dpa1.weekday_appr_process_start.isnull().sum().compute()
dpa1.groupby('weekday_appr_process_start').sk_id_prev.count().compute()
dpa1.groupby('weekday_appr_process_start').mean().compute()

#hour_appr_process_start
description.description[182]
dpa1.hour_appr_process_start.isnull().sum().compute()
dpa1.groupby('hour_appr_process_start').hour_appr_process_start.count().compute()
dpa1.groupby('hour_appr_process_start').mean().compute()

#flag_last_appl_per_contract - verifica se foi a ultima aplicacao (confere se nao ha duplicatas)
description.description[183]
dpa1.flag_last_appl_per_contract.isnull().sum().compute()
dpa1.groupby('flag_last_appl_per_contract').flag_last_appl_per_contract.count().compute()
#dropar todos que for N pois e duplicatas

#nflag_last_appl_in_day - verifica se e a ultima aplicacao do dia
description.description[184]
dpa1.nflag_last_appl_in_day.isnull().sum().compute()
dpa1.groupby('nflag_last_appl_in_day').nflag_last_appl_in_day.count().compute()
#dropar todos que for 0 pois e duplicatas

#rate_down_payment -de 0 a 1, taxa de pagamento inicial normalizado
description.description[186]
dpa1.rate_down_payment.isnull().sum().compute()
dpa1.rate_down_payment.mean().compute()
sns.distplot(dpa1.rate_down_payment.dropna(), kde=True, bins=20)

#rate_interest_primary - taxa de juros normalizado
description.description[187]
dpa1.rate_interest_primary.isnull().sum().compute()
dpa1.rate_interest_primary.mean().compute()
sns.distplot(dpa1.rate_interest_primary.dropna(), kde=True, bins=20)

#rate_interest_privileged
description.description[188]
dpa1.rate_interest_privileged.isnull().sum().compute()
dpa1.rate_interest_privileged.mean().compute()
sns.distplot(dpa1.rate_interest_privileged.dropna(), kde=True, bins=20)

#name_cash_loan_purpose
description.description[189]
dpa1.name_cash_loan_purpose.isnull().sum().compute()
dpa1.groupby('name_cash_loan_purpose').name_cash_loan_purpose.count().compute()
dpa1.groupby('name_cash_loan_purpose').mean().compute()

#name_contract_status - se foi aprovado, cancelado, recusado ou nao usado
description.description[190]
dpa1.name_contract_status.isnull().sum().compute()
dpa1.groupby('name_contract_status').name_contract_status.count().compute()
dpa1.groupby('name_contract_status').mean().compute()

#days_decision
description.description[191]
dpa1.days_decision.isnull().sum().compute()
dpa1.days_decision.mean().compute()
sns.distplot(dpa1.days_decision.dropna(), kde=True, bins=20)

#name_payment_type - metodo de pagamento que o cliente escolheu para pagar a divida
description.description[192]
dpa1.name_payment_type.isnull().sum().compute()
dpa1.groupby('name_payment_type').name_payment_type.count().compute()
dpa1.groupby('name_payment_type').mean().compute()

#code_reject_reason
description.description[193]
dpa1.code_reject_reason.isnull().sum().compute()
dpa1.groupby('code_reject_reason').code_reject_reason.count().compute()
dpa1.groupby('code_reject_reason').mean().compute()

#name_type_suite - quem estava acompanhando
description.description[194]
dpa1.name_type_suite.isnull().sum().compute()
dpa1.groupby('name_type_suite').name_type_suite.count().compute()
dpa1.groupby('name_type_suite').mean().compute()

#name_client_type
description.description[195]
dpa1.name_client_type.isnull().sum().compute()
dpa1.groupby('name_client_type').name_client_type.count().compute()
dpa1.groupby('name_client_type').mean().compute()

#name_goods_category
description.description[196]
dpa1.name_goods_category.isnull().sum().compute()
dpa1.groupby('name_goods_category').name_goods_category.count().compute()
dpa1.groupby('name_goods_category').mean().compute()

#name_portfolio
description.description[197]
dpa1.name_portfolio.isnull().sum().compute()
dpa1.groupby('name_portfolio').name_portfolio.count().compute()
dpa1.groupby('name_portfolio').mean().compute()

#name_product_type
description.description[198]
dpa1.name_product_type.isnull().sum().compute()
dpa1.groupby('name_product_type').name_product_type.count().compute()
dpa1.groupby('name_product_type').mean().compute()

#channel_type
description.description[199]
dpa1.channel_type.isnull().sum().compute()
dpa1.groupby('channel_type').channel_type.count().compute()
dpa1.groupby('channel_type').mean().compute()

#sellerplace_area
description.description[200]
dpa1.sellerplace_area.isnull().sum().compute()
dpa1.groupby('sellerplace_area').sellerplace_area.count().compute()
dpa1.groupby('sellerplace_area').mean().compute()

#name_seller_industry
description.description[201]
dpa1.name_seller_industry.isnull().sum().compute()
dpa1.groupby('name_seller_industry').name_seller_industry.count().compute()
dpa1.groupby('name_seller_industry').mean().compute()

#cnt_payment -
description.description[202]
dpa1.cnt_payment.isnull().sum().compute()
sns.distplot(dpa1.cnt_payment.dropna(), kde=True, bins=20)

#name_yield_group - taxa de juros em categorias
description.description[203]
dpa1.name_yield_group.isnull().sum().compute()
dpa1.groupby('name_yield_group').name_yield_group.count().compute()
dpa1.groupby('name_yield_group').mean().compute()

#product_combination - combinacao de produtos
description.description[204]
dpa1.product_combination.isnull().sum().compute()
dpa1.groupby('product_combination').product_combination.count().compute()
dpa1.groupby('product_combination').mean().compute()

#days_first_drawing - ??
description.description[205]
dpa1.days_first_drawing.isnull().sum().compute()
sns.distplot(dpa1.days_first_drawing.dropna(), kde=True, bins=20)

#days_first_due
description.description[206]
dpa1.days_first_due.isnull().sum().compute()
sns.distplot(dpa1.days_first_due.dropna(), kde=True, bins=20)

#days_last_due_1st_version
description.description[207]
dpa1.days_last_due_1st_version.isnull().sum().compute()
sns.distplot(dpa1.days_last_due_1st_version.dropna(), kde=True, bins=20)

#days_last_due
description.description[208]
dpa1.days_last_due.isnull().sum().compute()
sns.distplot(dpa1.days_last_due.dropna(), kde=True, bins=20)

#days_termination
description.description[209]
dpa1.days_termination.isnull().sum().compute()
sns.distplot(dpa1.days_termination.dropna(), kde=True, bins=20)

#nflag_insured_on_approval
description.description[210]
dpa1.nflag_insured_on_approval.isnull().sum().compute()
dpa1.groupby('nflag_insured_on_approval').nflag_insured_on_approval.count().compute()
dpa1.groupby('nflag_insured_on_approval').mean().compute()




columns = pa1.columns
columns[37]
pa1.head()
